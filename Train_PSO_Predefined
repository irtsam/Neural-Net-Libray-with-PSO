#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul  5 15:18:08 2018

@author: iot
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 27 11:33:49 2018

@author: iot
"""
import sklearn.datasets
import os
import pyswarms as ps
import numpy as np
import sklearn.cross_validation
import cv2
import random
from Neural_Net.Utilities import *
from Dataset_Loaders.Deveanagri_Handwritten_Character_Dataset_Loader import *
from Optimizers.pso import ParticleSwarm
from Optimizers.pso_INPROGRESS import ParticleSwarm_INPROGRESS
from sklearn.utils import shuffle
from sklearn.metrics import mean_squared_error
import time
import torch
import functools
import math
try:
    import visdom
    viss=True
except ImportError:
    viss=False

cost=[]
global t1
global t2
global w1, w2, w3



Weightt=[]
def dim_weights(shape):
        dim = 0
        for i in range(len(shape)-1):
            dim = dim + (shape[i] + 1) * shape[i+1]
        return dim
    
    
def Train_PSO(X,y, X_t, y_t,resume):
    global Weightt
    cuda=True
    def weights_to_vector(weights):
        w = np.asarray([])
        for i in range(len(weights)):
            v = weights[i].flatten()
            w = np.append(w, v)
        #print(w.shape)
        return w
    
    def vector_to_weights(vector, shape):
        weights = []
        #lngth= vector.shape
        #print(lngth)
        idx = 0
        for i in range(len(shape)-1):
            r = shape[i+1]
            c = shape[i] + 1
            idx_min = idx
            idx_max = idx + r*c
            #print(idx_min, idx_max)
            W = vector[idx_min:idx_max].reshape(r,c)
            weights.append(W)
            idx=idx_max 
        return weights
    
    def eval_neural_network(weights, shape, X,y):
        error= np.asarray([])
        #print(weights.shape)
        for Weight in weights:
            #print(Weight.shape)
            #print(Weight.shape, "Now")
            
            Weight= vector_to_weights(Weight, shape)
            w1,w2,w3= Weight[0],Weight[1],Weight[2]
            #print(X.shape,"here Now")
            a1, z2, a2, z3 ,a3 ,z4, a4 = feedforward(X,w1,w2,w3)
            cost = PSO_cost(y,a4)
            error= np.append(error,cost)
        #print(error.shape)
        return error
    
    def PSO_cost(y_enc, outpt):
        """Logistic Regression loss function. Requires a label and calculated ouput"""
        global t1
        global t2
        
        if cuda:
            #print(y_enc,outpt)
            loss=nn.MSELoss()
            cost= loss(y_enc,outpt)
            #cost=cost/(y_enc.size()[1])
        else:
            
            cost= mean_squared_error(y_enc, outpt)
        return cost
    
    
    #Setting Up the Dataset
    X_copy, y_enc = X.copy(),y.copy()
    X_copy=X_copy/255
    X_copy=np.transpose(X_copy)
    
    
    #Loading/Initializing the weights
    shape=[64,30,20,10]
   
    y_enc=torch.from_numpy(y_enc).cuda()
    cost_func = functools.partial(eval_neural_network, shape=shape, X=X_copy, y=y_enc)
    
   
    #swarm.update()
    options = {'c1': 0.5, 'c2': 0.3, 'w':0.9, 'k': 5, 'p': 2}
    optimizer = ps.single.LocalBestPSO(n_particles=100, dimensions=dim_weights(shape), options=options)
    cost, pos = optimizer.optimize(cost_func, print_step=10, iters=1000, verbose=3)
    
    
    
    
    #while swarm.best_score > 1e-6 and i<500:
    
    Weightss=vector_to_weights(pos, shape)
    w1,w2,w3= Weightss[0],Weightss[1], Weightss[2]
    np.savetxt("W1_PSO", w1)
    np.savetxt("W2_PSO", w2)
    np.savetxt("W3_PSO", w3)
    Test(X_t,y_t,w1,w2,w3)
    
    
    

    t1=time.time()

    
    return 1

global y_pred
global y_tt
def Test(X_t,y_t,w1,w2,w3):
    global y_pred
    global y_tt
    y_tt=y_t
    
    w1,w2,w3=w1,w2,w3
    
    """
    w1=np.loadtxt("W1_PSO")
    w2=np.loadtxt("W2_PSO")
    w3=np.loadtxt("W3_PSO")
    """
    X_t=np.transpose(X_t)
    y_pred = predict(X_t,w1,w2,w3)
    #print(y_pred.shape)
    y_t= np.argmax(y_t,axis=0)
    acc = np.sum(y_t == y_pred, axis=0)/ X_t.shape[0]
    print('training accuracy', acc*100)
    

if __name__ == '__main__':
    path="/home/iot/Public/htmll/PSO/NeuralNet_Optimization_PSO/DevanagariHandwrittenCharacterDataset"
    data= Devan_data_loader(path, 'Train')
    #X_Tr,Y_Tr=data.getdata('Train')
    #X_Ts,Y_Ts=data.getdata('Test')
    
    
    num_classes = 10
    mnist = sklearn.datasets.load_digits(num_classes)
    X, X_test, y, y_test = sklearn.cross_validation.train_test_split(mnist.data, mnist.target)
    """Revert the below back"""
    #num_inputs = X.shape[1]
    num_inputs=64
    y_true = np.zeros((len(y), num_classes))
    for i in range(len(y)):
        y_true[i, y[i]] = 1

    y_test_true = np.zeros((len(y_test), num_classes))
    for i in range(len(y_test)):
        y_test_true[i, y_test[i]] = 1

    # Set up
    shape = (num_inputs, 64, 32, num_classes)
    X, y_true,X_test, y_test_true=X.T,y_true.T,X_test.T,y_test_true.T
    print(X.shape, y_true.shape, X_test.shape, y_test_true.shape)
    #X_Tr=np.ones([1024,78200])
    #Y_Tr=np.ones([46,78200])
    #X_Ts=np.ones([1024,13800])
    #Y_Ts=np.ones([46,13800])
    Train_PSO(X, y_true,X_test, y_test_true,resume=True)
    #Test(X_Ts,Y_Ts)
